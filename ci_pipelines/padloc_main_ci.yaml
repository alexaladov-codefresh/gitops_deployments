version: "1.0"
#-----------------------------BASE SETTINGS----------------------------------------<
indicators:
  # Git integration name to use in all git operations
  - &git_integration github-codefresh-personal
  # NodeJS image version and tag
  - &node_image node:16.13.1
  # yq image version and tag
  - &yq_image mikefarah/yq:4.40.4
  # Git user name for CI commits
  - &git_user_name ci-bot
  # Git user email for CI commits
  - &git_user_email ci-bot@example.com
#----------------------------------------------------------------------------------<
# Pipeline stages in the order of appearing on the build screen
stages:
  - "clone"
  - "test"
  - "build"
  - "deploy-dev"
  - "approve"
  - "deploy-prod"

steps:
#-----------------------------Clone section-----------------------------------------<
  clone:
    title: "Cloning repository"
    type: "git-clone"
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: *git_integration
    stage: "clone"
#-----------------------------Tests section-----------------------------------------<
  prepare_tests:
    title: "Prepare dependancies"
    image: *node_image
    working_directory: "${{clone}}"
    commands:
      - npm ci
    stage: "test"
    
  test_section:
    stage: "test"
    image: *node_image
    working_directory: "${{clone}}"
    scale:
      test_prettier_check:
        title: "Perform prettier check"
        commands:
          - npm run prettier:check
      test_pwa_check:
        title: "Perform pwa check"
        commands:
          - npm run pwa:build
      test_webext_check:
        title: "Perform web-extension check"
        commands:
          - npm run web-extension:build
      test_srv_dryrun_check:
        title: "Perform server dry run check"
        commands:
          - npm run server:start-dry
      test_main_check:
        title: "Perform tests"
        commands:
          - npm run test
#-----------------------------Build section-----------------------------------------<
  build_section:
    stage: "build"
    working_directory: "${{clone}}"
    type: "build"
    tag: "build-cache"
    buildkit: true
    tags: 
      - '${{CF_BRANCH}}-${{CF_SHORT_REVISION}}'
    metadata: 
      set: 
        - qa: passed
    scale:
      build_server:
        title: "Building Server image"
        image_name: "${{SERVER_IMAGE}}"
        dockerfile: "Dockerfile-server"
      build_pwa:
        title: "Building PWA image"
        image_name: "${{PWA_IMAGE}}"
        dockerfile: "Dockerfile-pwa"

  #-----------------------------Deploy to Dev section--------------------------------<
  dev_argo_app_source_clone:
    stage: "deploy-dev"
    title: "Cloning source"
    type: "git-clone"
    repo: "https://github.com/${{DEV_SOURCE}}.git"
    revision: "main"
    git: *git_integration

  dev_modify_image:
    stage: "deploy-dev"
    image: *yq_image
    working_directory: "${{dev_argo_app_source_clone}}"
    commands:
      - yq eval '.spec.source.helm.parameters |= map(select(.name == "server.image").value |= "${{SERVER_IMAGE}}:${{CF_BRANCH}}-${{CF_SHORT_REVISION}}")' ${{DEV_APP_FILENAME}} -i
      - yq eval '.spec.source.helm.parameters |= map(select(.name == "pwa.image").value |= "${{PWA_IMAGE}}:${{CF_BRANCH}}-${{CF_SHORT_REVISION}}")' ${{DEV_APP_FILENAME}} -i
      - cat ${{DEV_APP_FILENAME}}
      - cf_export DEV_APP_FOLDER=$(pwd)

  commit_and_push_dev:
    stage: "deploy-dev"
    title: Commit app changes and push
    type: git-commit
    arguments:
      repo: "${{DEV_SOURCE}}"
      git: *git_integration
      working_directory: "${{DEV_APP_FOLDER}}"
      commit_message: update images with tag ${{CF_SHORT_REVISION}}
      git_user_name: *git_user_name
      git_user_email: *git_user_email
      rebase: true
      allow_empty: true
      
  link_to_dev_app:
    stage: "deploy-dev"
    title: Link to the application ingress
    working_directory: "${{dev_argo_app_source_clone}}"
    image: *yq_image
    commands:
      - export INGRESS_LINK=$(yq '.spec.source.helm.parameters.[] | select(.name == "ingress.host").value' ${{DEV_APP_FILENAME}}) 
      - cf_export link_to_dev_app_CF_OUTPUT_URL="https://${INGRESS_LINK}"

 #-----------------------------Approval section--------------------------------<   
  approval:
      type: pending-approval
      stage: "approve"
      description: Approve
      title: Update prod with the new image?
      arguments:
        timeout:
          duration: 100
          finalState: denied
#-----------------------------Deploy to Prod section--------------------------------<    
  prod_argo_app_source_clone:
    stage: "deploy-prod"
    title: "Cloning source"
    type: "git-clone"
    repo: "https://github.com/${{PROD_SOURCE}}.git"
    revision: "main"
    git: *git_integration
    
  prod_modify_image:
    stage: "deploy-prod"
    image: *yq_image
    working_directory: "${{prod_argo_app_source_clone}}"
    commands:
      - yq eval '.spec.source.helm.parameters |= map(select(.name == "server.image").value |= "${{SERVER_IMAGE}}:${{CF_BRANCH}}-${{CF_SHORT_REVISION}}")' ${{PROD_APP_FILENAME}} -i
      - yq eval '.spec.source.helm.parameters |= map(select(.name == "pwa.image").value |= "${{PWA_IMAGE}}:${{CF_BRANCH}}-${{CF_SHORT_REVISION}}")' ${{PROD_APP_FILENAME}} -i
      - cat ${{PROD_APP_FILENAME}}
      - cf_export PROD_APP_FOLDER=$(pwd)
      
  commit_and_push_prod:
    stage: "deploy-prod"
    title: Commit app changes and push
    type: git-commit
    arguments:
      repo: "${{PROD_SOURCE}}"
      git: *git_integration
      working_directory: "${{PROD_APP_FOLDER}}"
      commit_message: update images with tag ${{CF_SHORT_REVISION}}
      git_user_name: *git_user_name
      git_user_email: *git_user_email
      rebase: true
      allow_empty: true
      
  link_to_prod_app:
    stage: "deploy-prod"
    title: Link to the application ingress
    working_directory: "${{prod_argo_app_source_clone}}"
    image: *yq_image
    commands:
      - export INGRESS_LINK=$(yq '.spec.source.helm.parameters.[] | select(.name == "ingress.host").value' ${{PROD_APP_FILENAME}}) 
      - cf_export link_to_prod_app_CF_OUTPUT_URL="https://${INGRESS_LINK}"


    
    



